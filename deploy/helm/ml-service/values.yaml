# Default values for ml-service
replicaCount: 2

image:
  repository: ghcr.io/lawrencekiba/ml-service
  pullPolicy: IfNotPresent
  tag: "latest"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

# Service configuration
service:
  type: ClusterIP
  port: 80
  targetPort: 8000
  annotations: {}

# Ingress configuration
ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  hosts:
    - host: ml-service.local
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: ml-service-tls
      hosts:
        - ml-service.local

# Blue-Green deployment configuration
blueGreen:
  enabled: true
  productionSlot: blue  # blue or green
  strategy:
    type: BlueGreen
    blueGreen:
      activeService: ml-service
      previewService: ml-service-preview
      autoPromotionEnabled: false
      scaleDownDelaySeconds: 30

# Resources
resources:
  limits:
    cpu: 1000m
    memory: 2Gi
  requests:
    cpu: 200m
    memory: 512Mi

# Autoscaling
autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

# Node selection
nodeSelector: {}
tolerations: []
affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      podAffinityTerm:
        labelSelector:
          matchExpressions:
          - key: app.kubernetes.io/name
            operator: In
            values:
            - ml-service
        topologyKey: kubernetes.io/hostname

# Security context
podSecurityContext:
  fsGroup: 2000
  runAsNonRoot: true
  runAsUser: 1000

securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: false

# Probes
livenessProbe:
  httpGet:
    path: /healthz
    port: http
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3

readinessProbe:
  httpGet:
    path: /healthz
    port: http
  initialDelaySeconds: 5
  periodSeconds: 5
  timeoutSeconds: 3
  failureThreshold: 3

# Environment variables
env:
  - name: MODEL_TYPE
    value: "distilbert"
  - name: MODEL_VERSION
    value: "latest"
  - name: LOG_LEVEL
    value: "INFO"
  - name: MAX_WORKERS
    value: "4"

# ConfigMap data
config:
  modelType: "distilbert"
  modelVersion: "latest"
  logLevel: "INFO"
  maxWorkers: 4
  batchSize: 16

# Secrets (use external secret management in production)
secrets:
  postgresUser: "mlops_user"
  postgresPassword: "mlops_pass"
  # Add other secrets as needed

# PostgreSQL dependency
postgresql:
  enabled: true
  auth:
    postgresPassword: "postgres_admin"
    username: "mlops_user"
    password: "mlops_pass"
    database: "mlops_db"
  primary:
    persistence:
      enabled: true
      size: 20Gi
    resources:
      requests:
        memory: 256Mi
        cpu: 250m
      limits:
        memory: 1Gi
        cpu: 500m

# Redis dependency
redis:
  enabled: true
  auth:
    enabled: false
  master:
    persistence:
      enabled: true
      size: 8Gi
    resources:
      requests:
        memory: 128Mi
        cpu: 100m
      limits:
        memory: 512Mi
        cpu: 250m

# MLflow configuration
mlflow:
  enabled: true
  trackingUri: "http://mlflow:5000"
  artifactStore: "/mlflow/artifacts"

# Monitoring
monitoring:
  enabled: true
  prometheus:
    enabled: true
    port: 8000
    path: /metrics
  grafana:
    dashboards:
      enabled: true

# Networking
networkPolicy:
  enabled: false
  ingress: []
  egress: []

# Volume mounts
volumes: []
volumeMounts: []

# Pod disruption budget
podDisruptionBudget:
  enabled: true
  minAvailable: 1

# Service monitor for Prometheus
serviceMonitor:
  enabled: true
  interval: 30s
  path: /metrics
  labels: {}