name: Promote to Production

on:
  workflow_dispatch:
    inputs:
      deployment_strategy:
        description: 'Deployment Strategy'
        required: true
        default: 'blue-green'
        type: choice
        options:
        - blue-green
        - canary
      traffic_percentage:
        description: 'Initial traffic percentage for canary (1-100)'
        required: false
        default: '10'
        type: string
      rollback:
        description: 'Rollback to previous version'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  KUBE_NAMESPACE: mlops-prod

jobs:
  promote-to-prod:
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
    
    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'
    
    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_PROD }}" | base64 -d > kubeconfig
        echo "KUBECONFIG=$(pwd)/kubeconfig" >> $GITHUB_ENV
    
    - name: Create namespace if not exists
      run: |
        kubectl create namespace ${{ env.KUBE_NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -
    
    - name: Get current deployment info
      id: current
      run: |
        # Get current active deployment
        CURRENT_ACTIVE=$(kubectl get ingress ml-service-main -n ${{ env.KUBE_NAMESPACE }} -o jsonpath='{.spec.rules[0].http.paths[0].backend.service.name}' 2>/dev/null || echo "ml-service-blue")
        echo "current_active=$CURRENT_ACTIVE" >> $GITHUB_OUTPUT
        
        # Determine target deployment
        if [ "$CURRENT_ACTIVE" = "ml-service-blue" ]; then
          echo "target_deployment=green" >> $GITHUB_OUTPUT
          echo "target_service=ml-service-green" >> $GITHUB_OUTPUT
        else
          echo "target_deployment=blue" >> $GITHUB_OUTPUT
          echo "target_service=ml-service-blue" >> $GITHUB_OUTPUT
        fi
    
    - name: Handle rollback
      if: ${{ github.event.inputs.rollback == 'true' }}
      run: |
        echo "Performing rollback..."
        
        # Switch traffic back to previous deployment
        kubectl patch ingress ml-service-main -n ${{ env.KUBE_NAMESPACE }} --type='json' -p='[
          {
            "op": "replace",
            "path": "/spec/rules/0/http/paths/0/backend/service/name",
            "value": "${{ steps.current.outputs.current_active == 'ml-service-blue' && 'ml-service-green' || 'ml-service-blue' }}"
          }
        ]'
        
        # Remove canary ingress if exists
        kubectl delete ingress ml-service-canary -n ${{ env.KUBE_NAMESPACE }} --ignore-not-found=true
        
        echo "Rollback completed"
        exit 0
    
    - name: Deploy new version to target environment
      if: ${{ github.event.inputs.rollback != 'true' }}
      run: |
        TARGET_DEPLOYMENT="${{ steps.current.outputs.target_deployment }}"
        
        helm upgrade --install ml-service-$TARGET_DEPLOYMENT ./deploy/helm/ml-service \
          --namespace ${{ env.KUBE_NAMESPACE }} \
          --set image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} \
          --set image.tag=${{ github.sha }} \
          --set environment=production \
          --set nameOverride=ml-service-$TARGET_DEPLOYMENT \
          --set service.name=ml-service-$TARGET_DEPLOYMENT \
          --set replicaCount=3 \
          --set ingress.host=ml-service.yourdomain.com \
          --set resources.requests.cpu=200m \
          --set resources.requests.memory=512Mi \
          --set resources.limits.cpu=1000m \
          --set resources.limits.memory=2Gi \
          --wait --timeout=15m
    
    - name: Wait for new deployment to be ready
      if: ${{ github.event.inputs.rollback != 'true' }}
      run: |
        kubectl rollout status deployment/ml-service-${{ steps.current.outputs.target_deployment }} -n ${{ env.KUBE_NAMESPACE }} --timeout=900s
    
    - name: Run pre-promotion tests
      if: ${{ github.event.inputs.rollback != 'true' }}
      run: |
        # Test new deployment directly
        kubectl port-forward svc/${{ steps.current.outputs.target_service }} 8081:80 -n ${{ env.KUBE_NAMESPACE }} &
        sleep 10
        
        # Health check
        curl -f http://localhost:8081/healthz
        
        # Prediction test
        response=$(curl -s -X POST "http://localhost:8081/predict" \
          -H "Content-Type: application/json" \
          -d '{"text": "Production deployment test"}')
        
        echo "New deployment response: $response"
        echo "$response" | jq -e '.prediction and .latency_ms and .model_version'
        
        # Performance test
        for i in {1..10}; do
          start_time=$(date +%s%N)
          curl -s -X POST "http://localhost:8081/predict" \
            -H "Content-Type: application/json" \
            -d '{"text": "Performance test request"}' > /dev/null
          end_time=$(date +%s%N)
          latency=$(( (end_time - start_time) / 1000000 ))
          echo "Request $i latency: ${latency}ms"
          
          if [ $latency -gt 2000 ]; then
            echo "Latency too high: ${latency}ms"
            exit 1
          fi
        done
    
    - name: Implement deployment strategy
      if: ${{ github.event.inputs.rollback != 'true' }}
      run: |
        STRATEGY="${{ github.event.inputs.deployment_strategy }}"
        TRAFFIC_PCT="${{ github.event.inputs.traffic_percentage }}"
        
        if [ "$STRATEGY" = "canary" ]; then
          echo "Implementing canary deployment with $TRAFFIC_PCT% traffic"
          
          # Create canary ingress
          cat <<EOF | kubectl apply -f -
        apiVersion: networking.k8s.io/v1
        kind: Ingress
        metadata:
          name: ml-service-canary
          namespace: ${{ env.KUBE_NAMESPACE }}
          annotations:
            kubernetes.io/ingress.class: "nginx"
            nginx.ingress.kubernetes.io/canary: "true"
            nginx.ingress.kubernetes.io/canary-weight: "$TRAFFIC_PCT"
        spec:
          rules:
          - host: ml-service.yourdomain.com
            http:
              paths:
              - path: /
                pathType: Prefix
                backend:
                  service:
                    name: ${{ steps.current.outputs.target_service }}
                    port:
                      number: 80
        EOF
          
          echo "Canary deployment active with $TRAFFIC_PCT% traffic"
          
        else
          echo "Implementing blue-green deployment"
          
          # Switch main traffic to new deployment
          kubectl patch ingress ml-service-main -n ${{ env.KUBE_NAMESPACE }} --type='json' -p='[
            {
              "op": "replace",
              "path": "/spec/rules/0/http/paths/0/backend/service/name",
              "value": "${{ steps.current.outputs.target_service }}"
            }
          ]'
          
          echo "Blue-green switch completed"
        fi
    
    - name: Monitor deployment
      if: ${{ github.event.inputs.rollback != 'true' }}
      run: |
        echo "Monitoring deployment for 5 minutes..."
        
        for i in {1..30}; do
          # Check pod status
          READY_PODS=$(kubectl get pods -l app=ml-service,version=${{ steps.current.outputs.target_deployment }} -n ${{ env.KUBE_NAMESPACE }} --field-selector=status.phase=Running -o name | wc -l)
          echo "Ready pods: $READY_PODS"
          
          # Check service health
          kubectl port-forward svc/ml-service 8082:80 -n ${{ env.KUBE_NAMESPACE }} &
          PORT_FORWARD_PID=$!
          sleep 5
          
          HEALTH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8082/healthz || echo "000")
          kill $PORT_FORWARD_PID 2>/dev/null || true
          
          echo "Health check status: $HEALTH_STATUS"
          
          if [ "$HEALTH_STATUS" != "200" ]; then
            echo "Health check failed, initiating rollback..."
            # Rollback logic here
            exit 1
          fi
          
          sleep 10
        done
        
        echo "Deployment monitoring completed successfully"
    
    - name: Post-deployment tests
      if: ${{ github.event.inputs.rollback != 'true' }}
      run: |
        # Load test
        python scripts/load-test.py --url "https://ml-service.yourdomain.com" --requests 100 --concurrency 10
    
    - name: Update deployment status
      if: always()
      uses: actions/github-script@v6
      with:
        script: |
          const status = '${{ job.status }}' === 'success' ? 'success' : 'failure';
          const strategy = '${{ github.event.inputs.deployment_strategy }}';
          const rollback = '${{ github.event.inputs.rollback }}' === 'true';
          
          let description;
          if (rollback) {
            description = `Rollback ${status}`;
          } else {
            description = `${strategy} deployment ${status}`;
          }
          
          github.rest.repos.createCommitStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            sha: context.sha,
            state: status,
            target_url: 'https://ml-service.yourdomain.com',
            description: description,
            context: 'deployment/prod'
          });